@page "/Dashboard"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using StocksPage.Client.Services
@using StocksPage.Shared.DTOs
@using StocksPage.Shared.DTOs.PolygonAPI

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator

<h1>Dashboard</h1>

@if (!@areTickersRendered)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfAutoComplete TValue="string" TItem="TickerNameGet" Placeholder="Select stock" DataSource="@Tickers" PopupWidth="250px" PopupHeight="400px">
    <AutoCompleteFieldSettings Value="Ticker">
    </AutoCompleteFieldSettings>
    <AutoCompleteEvents TValue="string" TItem="TickerNameGet" ValueChange="@onChange"></AutoCompleteEvents>
    </SfAutoComplete>

}

@code {
    [Inject]
    public IHttpStockService stockService { get; set; }

    private List<TickerNameGet> Tickers = new List<TickerNameGet>{};

    bool areTickersRendered = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tickers = await stockService.GetTickerNames();

            foreach(var t in tickers)
            {
                Tickers.Add(new TickerNameGet
                {
                    Ticker = t.Ticker,
                    Name = t.Name
                });
            }

            areTickersRendered = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    public async Task onChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TickerNameGet> args) 
    {
        navigator.NavigateTo("/Details/" + args.Value);
    } 
}