@page "/Dashboard"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using StocksPage.Client.Services
@using StocksPage.Shared.DTOs
@using StocksPage.Shared.DTOs.PolygonAPI

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator

@if(@Tickers == null || !@Tickers.Any())
{
    <div class="container">
        <div class="loader">Page is <span style="color:#bc4749">LOADING...</span> Please wait.</div>
    </div>
}
else 
{
    <div class="dashboard">
        <h1>Dashboard</h1>
        <div class="content">
            <p>Find a company:</p>
            <SfAutoComplete CssClass="finder" TValue="string" TItem="TickerNameGet" Placeholder="Select stock" AllowCustom=false DataSource="@Tickers"  Width="1000px" PopupWidth="1000px">
                <AutoCompleteFieldSettings Value="Ticker"></AutoCompleteFieldSettings>
                <AutoCompleteTemplates TItem="TickerNameGet">
                    <ItemTemplate>
                        <div>
                            <div class="ticker">@((context as TickerNameGet).Ticker)</div>
                            <div class="name">@((context as TickerNameGet).Name)</div>
                        </div>
                    </ItemTemplate>
                </AutoCompleteTemplates>
                <AutoCompleteEvents TValue="string" TItem="TickerNameGet" ValueChange="@onChange"></AutoCompleteEvents>
            </SfAutoComplete>
        </div>   
    </div>
}


<style>
    .container {
        height: 80vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-size: 2rem;
    }
    .loader {
        font-size: 4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .dashboard {
        display: grid;
        grid-template-columns: 1fr 1.5fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        width: 90vw;
        height: 90vh;
        justify-items: center;
        align-items: center;
    }
    .content {
        grid-row: 2/3;
        grid-column: 1/4;
    }
    h1 {
        grid-row: 1/3;
        grid-column: 1/4;
        font-size: 7rem;
        color: #386641;
    }
    p {
        font-size: 3rem;
        color: #bc4749;
    }
    .e-ddl.e-input-group.e-control-wrapper .e-input {
        font-size: 2rem;
        justify-content: center;
        align-items: center;
        color: #386641;
    }
    .finder {
        padding: 1rem;
        color: #386641;
    }
    .ticker {
        float: left;
        align-items: left;
        font-size: 1.7rem;
        font-weight: 600;
        margin-right: 1.5rem;
    }
    .name {
        font-size: 1.5rem;
        align-items: left;
    }
</style>

@code {
    [Inject]
    public IHttpStockService stockService { get; set; }

    private List<TickerNameGet> Tickers = new List<TickerNameGet>{};

    private bool areTickersRendered = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IEnumerable<TickerNameGet> tickers;
            if(stockService.tickerNames == null || !stockService.tickerNames.Any())
            {
                tickers = await stockService.GetTickerNames();
                stockService.tickerNames = tickers;
            }
            else
            {
                tickers = stockService.tickerNames;
            }      

            foreach(var t in tickers)
            {
                Tickers.Add(new TickerNameGet
                {
                    Ticker = t.Ticker,
                    Name = t.Name
                });
            }

            areTickersRendered = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    public async Task onChange(ChangeEventArgs<string, TickerNameGet> args) 
    {
        navigator.NavigateTo("/Dashboard/Details/" + args.Value);
    } 
}