@page "/Details/{stock}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using StocksPage.Client.Services
@using StocksPage.Shared.DTOs
@using StocksPage.Shared.DTOs.PolygonAPI

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator
@inject AuthenticationStateProvider authProvider

@if(@TickerChart == null || @TickerDetail == null || !@areTickersRendered)
{
    <div class="container">
        <div class="loader">Page is <span style="color:#bc4749">LOADING</span>... Please wait.</div>
    </div>
}
else
{
    <div class="dashboard">
        <h1 class="title">Dashboard</h1>
            <SfAutoComplete CssClass="finder" TValue="string" TItem="TickerNameGet" Placeholder="Select stock" AllowCustom=false DataSource="@Tickers"  Width="1000px" PopupWidth="1000px" PopupHeight="400px">
                <AutoCompleteFieldSettings Value="Ticker"></AutoCompleteFieldSettings>
                <AutoCompleteTemplates TItem="TickerNameGet">
                    <ItemTemplate>
                        <div>
                            <div class="ticker">@((context as TickerNameGet).Ticker)</div>
                            <div class="name">@((context as TickerNameGet).Name)</div>
                        </div>
                    </ItemTemplate>
                </AutoCompleteTemplates>
                <AutoCompleteEvents TValue="string" TItem="TickerNameGet" ValueChange="@onChange"></AutoCompleteEvents>
            </SfAutoComplete>
        <div class="logo">
            @if(@TickerDetail.LogoUrl == null)
            {
                <img class="logo-img" src="https://www.pngmart.com/files/7/Stocks-Transparent-Background.png" alt="@stock logo"/>
            }
            else
            {
                <img class="logo-img" src="@TickerDetail.LogoUrl" alt="@stock logo"/>
            }
        </div>
        <div class="info">
            <SfButton CssClass="button-dsg" IconCss="e-icons e-check-small" Content="Add to watchlist" @onclick="addToWatchlist" IconPosition="IconPosition.Right"></SfButton>
            @TickerDetail.Name @TickerDetail.Ticker
        </div>
        <div class="details">
            <SfTab Width="100%" CssClass="tab_content e-fill">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Details">

                            </TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div>
                                @if (TickerDetail.SicDescription != null)
                                {
                                    <p><b>SicDescription:</b> @TickerDetail.SicDescription</p>
                                }
                                @if (TickerDetail.Country != null)
                                {
                                    <p><b>Country:</b> @TickerDetail.Country.ToString().ToUpper()</p>
                                }
                                @if (TickerDetail.Currency != null)
                                {
                                    <p><b>Currency:</b> @TickerDetail.Currency.ToString().ToUpper()</p>
                                }
                                @if (TickerDetail.Cik != null)
                                {
                                    <p><b>Cik:</b> @TickerDetail.Cik</p>
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem CssClass="item">
                        <ChildContent>
                            <TabHeader Text="More">

                            </TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div>
                                @if (TickerDetail.Description != null)
                                {
                                    <p><b>Description:</b> @TickerDetail.Description</p>
                                }
                                @if(TickerDetail.TotalEmployees != null)
                                {
                                    <p><b>Number of employees:</b> @TickerDetail.TotalEmployees</p>
                                }
                                @if (TickerDetail.Homepage != null)
                                {
                                    <p><b>Homepage:</b> <a href="@TickerDetail.Homepage">@TickerDetail.Homepage</a></p>
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
                            
        </div>
    </div>
    <div>
		<SfStockChart Title="@stock">
			<StockChartCrosshairSettings Enable="true">
			</StockChartCrosshairSettings>
            <StockChartTooltipSettings Enable="true">
            </StockChartTooltipSettings>
				<StockChartPrimaryXAxis>
					<StockChartAxisCrosshairTooltip Enable="true">
					</StockChartAxisCrosshairTooltip>
				</StockChartPrimaryXAxis>
				<StockChartPrimaryYAxis>
					<StockChartAxisCrosshairTooltip Enable="true">
					</StockChartAxisCrosshairTooltip>
				</StockChartPrimaryYAxis>
		<StockChartSeriesCollection>
			<StockChartSeries Type="@ChartSeriesType.Candle" DataSource="@TickerChart"
            XName="Date" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">
			</StockChartSeries>
		</StockChartSeriesCollection>
		<StockChartChartArea>
			<StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
		</StockChartChartArea>
		</SfStockChart>
	</div>
    <div class="articles">
        @if(@News != null && @News.Any())
        {
            <h1 class="title-a">Articles</h1>
            <SfGrid TValue=@TickerNewsGet DataSource="@News" RowHeight="60" AllowSorting="true">
                <GridPageSettings PageSize="5"></GridPageSettings>
                <SelectionStyleComponent>
                </SelectionStyleComponent>
                <GridColumns>
                    <GridColumn HeaderText="Title" TextAlign="TextAlign.Left" Width="120">
                        <Template> 
                        @{ 
                            var news = (context as @TickerNewsGet); 
                                                <div><a rel='nofollow' href="#" @onclick="(() => navigateToArticle(news.Url))">@news.Title</a></div> 
                        }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(TickerNewsGet.PageName) HeaderText="Name" TextAlign="TextAlign.Left" Width="20"></GridColumn>
                    <GridColumn Field=@nameof(TickerNewsGet.Created) HeaderText="Created" TextAlign="TextAlign.Center" Format="d" Width="40"></GridColumn>
                </GridColumns>
            </SfGrid>  
        }
    </div>

}
<style>
    body {
        overflow-x: hidden;
    }
    .container {
        height: 80vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-size: 2rem;
        object-fit: contain;
    }
    .loader {
        font-size: 4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .title {
        grid-column: 1/2;
        grid-row: 1/2;
        font-size: 5rem;
    }
    .title-a {
        font-size: 3rem;
    }
    .dashboard {
        display: grid;
        width: 85vw;
        grid-template-rows: .5fr 4.5fr .5fr;
        grid-template-columns: 1fr 1fr 2fr;
        row-gap: 15px;
        column-gap: 50px;
        justify-items: center;
        align-items: center;
    }
    .logo-img {
         height: auto; 
         width: auto;
         max-width: 350px; 
         max-height: 350px;
    }
    .logo {
         grid-column: 1/2;
         grid-row: 2/3;
    }
    .details {
        grid-column: 2/4;
        grid-row: 2/3;
        justify-self: start;
        align-self: end;
    }
    .e-tab > .e-content {
        overflow-y: auto;
    }
    .e-tab-text {
        color: #f2e8cf;
    }
    .e-tab-wrap {
        background: #6a994e !important;
    }
    .e-tab .e-content .e-item {
        background: #386641 !important;
        color: #f2e8cf;
        font-size: 1.3rem;
        margin-bottom: 15px;
        border-top: 2px solid white;
        text-align: justify;
        padding: 2rem;
        width: 1600px;
        height: 300px;
    }
    .info {
        grid-column: 2/4;
        grid-row: 2/3;
        justify-self: start;
        align-self: start;
        font-size: 4rem;
        font-weight: 600;
    }
    .e-ddl.e-input-group.e-control-wrapper .e-input {
        font-size: 2rem;
        justify-content: center;
        align-items: center;
        color: #6a994e;
    }
    .finder {
        padding: 1rem;
        color: #386641;
    }
    .ticker {
        float: left;
        align-items: left;
        font-size: 1.7rem;
        font-weight: 600;
        margin-right: 1.5rem;
    }
    .name {
        font-size: 1.5rem;
        align-items: left;
    }
    .button-dsg {
        width: 13rem;
        background: #bc4749;
        border: none;
        border-radius: 5%;
        font-size: 1.3rem;
        font-weight: 600;
        padding: 1rem;
        transition: all .3s ease;
    }
    .button-dsg:hover {
        background: #fc8385;
    }
    .articles {
        margin-top: 50px;
        margin-bottom: 50px;
    }
    .e-grid tr.e-row:hover .e-rowcell:not(.e-cellselectionbackground):not(.e-active):not(.e-updatedtd):not(.e-indentcell) {
        background-color: #6a994e !important;
    }
    .e-grid .e-gridcontent .e-rowcell { 
        background-color: #386641;
        font-size: 1.3rem;
    } 
    .e-grid .e-rowcell {
        color: #f2e8cf !important;
    } 
    .e-grid .e-headercell { 
        background-color: #bc4749; 
    } 
    .e-grid .e-headercell .e-headercelldiv { 
        font-size: 20px;
    } 
    .e-headercell {         
        color: #f2e8cf; 
        font-weight: bold; 
    } 
    a {
        text-decoration: none;
    }

</style>


@code {
    [Parameter]
    public string stock { get; set; }

    [Inject]
    public IHttpStockService stockService { get; set; }

    private TickerDetailGet? TickerDetail;
    private IEnumerable<TickerChartGet> TickerChart = new List<TickerChartGet>{};

    private bool isAuthenticated;
    private string userId;

    private List<TickerNameGet> Tickers = new List<TickerNameGet>{};
    private IEnumerable<TickerNewsGet>? News = new List<TickerNewsGet>{};

    private bool areTickersRendered = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            AuthenticationState authState = await authProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userId = $"{user.FindFirst(c => c.Type == "sub")?.Value}";

                var arg = stock.ToString();

                TickerDetail = await stockService.GetTickerDetail(arg);
                TickerChart = await stockService.GetTickerChart(arg);

                var tickers = await stockService.GetTickerNames();

                foreach(var t in tickers)
                {
                    Tickers.Add(new TickerNameGet
                    {
                        Ticker = t.Ticker,
                        Name = t.Name
                    });
                }

                News = await stockService.GetTickerNews(arg);

                areTickersRendered = true;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task addToWatchlist()
    {
        await stockService.AddTickerToWatchlist(TickerDetail, userId);
    }

    public void onChange(ChangeEventArgs<string, TickerNameGet> args) 
    {
        navigator.NavigateTo("/Details/" + args.Value, forceLoad: true);
    } 

    public void navigateToArticle(string url)
    {
        navigator.NavigateTo(url);
    }
}