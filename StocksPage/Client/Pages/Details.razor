@page "/Details/{stock}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using cryptopage.Shared.DTOs
@using Microsoft.AspNetCore.Authorization

@*@attribute [Authorize]*@
@inject HttpClient Http
@inject NavigationManager navigator

<PageTitle>Dashboard</PageTitle>


<h1>Dashboard</h1>
<h2>@stock</h2>

@if (chartGet == null || companyGet == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="layout">
		<SfDashboardLayout CellSpacing="@(new double[]{20,20})" Columns="9">
			<DashboardLayoutPanels>
				<DashboardLayoutPanel SizeX=9 SizeY=1>
					<HeaderTemplate><div>Search</div></HeaderTemplate>

					<ContentTemplate><div>search</div></ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel Row=1 SizeX=2 SizeY=2>
					<HeaderTemplate><div>Icon</div></HeaderTemplate>

					<ContentTemplate><div><img src="@info.LogoUrl" alt="@stock logo"/></div></ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel Row=1 SizeX=7 SizeY=1>
					<HeaderTemplate><div>Name</div></HeaderTemplate>

					<ContentTemplate>
                        <div>
                            @info.Name
                            <SfButton IconCss="e-icons e-check-small" Content="Add to watchlist" IconPosition="IconPosition.Right" @OnClick="(() => addToWatchlist())"></SfButton>
                        </div>
                    </ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel Row=2 SizeX=7 SizeY=1>
					<HeaderTemplate><div>Right data</div></HeaderTemplate>

					<ContentTemplate>
                        <div>
                            <SfTab CssClass="tab_content">
                                <TabItems>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Details">

                                            </TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div>
                                                Country: @info.Country
                                                Type: @info.Type
                                                Currency: @info.CurrencyName
                                                Cik: @info.Cik
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="More">

                                            </TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                             <div>
                                                 Description: @info.Description
                                                 SicDescription: @info.SicDescription
                                                 Number of employees: @info.Total_employees
                                                 Homepage: @info.Homepage
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                </TabItems>
                            </SfTab>
                            
                        </div>
                    </ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel Row=3 SizeX=9 SizeY=3>
					<HeaderTemplate><div>Chart</div></HeaderTemplate>

					<ContentTemplate>
						<div>
							<SfStockChart Title="@stock">
								<StockChartCrosshairSettings Enable="true">
								</StockChartCrosshairSettings>
								<StockChartTooltipSettings Enable="true">
								</StockChartTooltipSettings>
									<StockChartPrimaryXAxis>
										<StockChartAxisCrosshairTooltip Enable="true">
										</StockChartAxisCrosshairTooltip>
									</StockChartPrimaryXAxis>
									<StockChartPrimaryYAxis>
										<StockChartAxisCrosshairTooltip Enable="true">
										</StockChartAxisCrosshairTooltip>
									</StockChartPrimaryYAxis>
							<StockChartSeriesCollection>
								<StockChartSeries Type="@ChartSeriesType.Candle" DataSource="@chart"
                                XName="Date" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">
								</StockChartSeries>
							</StockChartSeriesCollection>
							<StockChartChartArea>
										<StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
							</StockChartChartArea>
							</SfStockChart>
						</div>
					</ContentTemplate>
				</DashboardLayoutPanel>
			</DashboardLayoutPanels>
		</SfDashboardLayout>
    </div>
}

<style>
    .tab_content .e-content .e-item {
        font-size: 2rem;
        padding: 1.7rem;
        text-align: justify;
    }
    .layout {
        position: relative;
        min-max: 90%;
    }
    .e-panel-header {
        background-color: rgba(0, 0, 0, .1);
        text-align: center;
    }
    .e-panel-content {
        text-align: center;
        margin-top: 10px;
    }
</style>

@code {
    [Parameter]
    public string stock { get; set; }

    private DetailsGet? companyGet;
    private ChartGet? chartGet;

    private DateTime currentDate = DateTime.Now;
    private DateTime fourMonthBeforeDate = DateTime.Now.AddMonths(-4);

    private class Point
    {
        public DateTime Date { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
        public double Volume { get; set; }
    }

    private class Info
    {
        public string Name { get; set; }

        public string Country { get; set; }
        public string Type { get; set; }
        public string CurrencyName { get; set; }
        public string Cik { get; set; }

        public string Description { get; set; }
        public string SicDescription { get; set; }
        public int Total_employees { get; set; }
        public string Homepage { get; set; }

        public string LogoUrl { get; set; }
    }

    private List<Point> chart = new List<Point>{};

    private Info info;

    protected override async Task OnInitializedAsync()
    {

        string now = currentDate.ToString("yyyy-MM-dd");
        string fourMonthBefore = fourMonthBeforeDate.ToString("yyyy-MM-dd");

        try
        {
            companyGet = await Http.GetFromJsonAsync<DetailsGet>($"https://api.polygon.io/v3/reference/tickers/{stock}?apiKey=Y2_T2LVdQtcQfcRydpbnQWtSV0suB4P_");
            chartGet = await Http.GetFromJsonAsync<ChartGet>($"https://api.polygon.io/v2/aggs/ticker/{stock}/range/1/day/{fourMonthBefore}/{now}?adjusted=true&sort=asc&limit=120&apiKey=Y2_T2LVdQtcQfcRydpbnQWtSV0suB4P_");

            
            info = new Info
            {
                Name = companyGet.results.name,
                Country = companyGet.results.locale,
                Type = companyGet.results.type,
                CurrencyName = companyGet.results.currency_name,
                Cik = companyGet.results.cik,

                Description = companyGet.results.description,
                SicDescription = companyGet.results.sic_description,
                Total_employees = companyGet.results.total_employees,
                Homepage = companyGet.results.homepage_url,
                LogoUrl = companyGet.results.branding.logo_url + "?apiKey=Y2_T2LVdQtcQfcRydpbnQWtSV0suB4P_"
            };

            var date = fourMonthBeforeDate;
            foreach(var point in chartGet.results)
            {
                chart.Add(new Point
                {
                    Date = date,
                    Open = point.o,
                    High = point.h,
                    Low = point.l,
                    Close = point.c,
                    Volume = point.v
                });

                date = date.AddDays(1);
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void addToWatchlist()
    {
        
    }

}
