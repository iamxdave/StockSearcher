@page "/Watchlist"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using StocksPage.Client.Services
@using StocksPage.Shared.DTOs

@inject HttpClient Http
@inject IJSRuntime js
@inject AuthenticationStateProvider authProvider

@if (!isAuthenticated)
{
    <div class="container">
        <div class="auth">User is <span style="color:#bc4749">NOT AUTHENTICATED</span> to see this watchlist</div>
    </div>
}

else if (Watchlists == null || !Watchlists.Any())
{
    <div class="container">
        <div class="loader">Page is <span style="color:#bc4749">LOADING</span>... Please wait.</div>
    </div>
}
else
{
    <h3 class="title">Watchlist</h3>
    <SfGrid TValue=@WatchlistGet DataSource="@Watchlists" RowHeight="60" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>() { "Delete", "Cancel" })">
        <GridEvents OnBatchDelete="OnDelete" TValue="WatchlistGet"></GridEvents>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridEditSettings AllowDeleting="true" Mode="@EditMode.Batch"></GridEditSettings>
        <GridColumns>
            <GridColumn HeaderText="Logo" TextAlign="TextAlign.Center" Width="30">
                <Template>
                    @{
                        var logo = (context as WatchlistGet);
                                @if (logo.LogoUrl == null)
                        {
                            logo.LogoUrl = "https://www.pngmart.com/files/7/Stocks-Transparent-Background.png";
                        }
                                <div class="img">
                                    <img src="@logo.LogoUrl" />
                                </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(WatchlistGet.Ticker) HeaderText="Ticker" IsPrimaryKey="true" TextAlign="TextAlign.Center" Width="20"></GridColumn>
            <GridColumn Field=@nameof(WatchlistGet.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(WatchlistGet.Country) HeaderText="Country" TextAlign="TextAlign.Center" Width="20"></GridColumn>
            <GridColumn Field=@nameof(WatchlistGet.Currency) HeaderText="Currency" TextAlign="TextAlign.Center" Width="20"></GridColumn>
            <GridColumn Field=@nameof(WatchlistGet.Cik) HeaderText="Cik" TextAlign="TextAlign.Center" Width="20"></GridColumn>
        </GridColumns>
    </SfGrid>
}

<style>
    .container {
        height: 80vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-size: 2rem;
    }

    .loader {
        font-size: 4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .title {
        font-size: 4rem;
        margin-bottom: 2rem;
    }
    .auth {
        font-size: 4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .e-grid .e-headercell .e-headercelldiv {
        font-size: 1.2rem;
    }

    .e-grid .e-rowcell {
        font-size: 1.4rem;
    }

    label {
        margin-right: 1.3rem;
    }

    img {
        margin: 1.5rem;
        width: 8rem;
        align-self: center;
    }
</style>

@code {
    [Inject]
    public IHttpStockService? stockService { get; set; }

    private IEnumerable<WatchlistGet>? Watchlists = new List<WatchlistGet> { };

    private bool isAuthenticated;
    private string? userId;

    private SfGrid<WatchlistGet>? DataGrid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await authProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                userId = $"{user.FindFirst(c => c.Type == "sub")?.Value}";
                Watchlists = await stockService.GetTickersFromWatchlist(userId);
            }
            else
            {
                isAuthenticated = false;
            }
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
    public async Task OnDelete(BeforeBatchDeleteArgs<WatchlistGet> args)
    {
        var tickerName = args.RowData.Ticker;
        var result = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {tickerName} from the list?");
        if (result)
        {
            await stockService.DeleteTickerFromWatchlist(tickerName, userId);
        }
        else
        {
            await DataGrid.CloseEditAsync();
        }
    }
}
